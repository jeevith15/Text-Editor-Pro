/-------------------------------------------------------------------------
/ Finished Code and GUI Application for Course 2 in the
/ Java Programming: Object Oriented Design of 
/ Data Structures Specialization:
/
/
/ Data structures: Measuring and Optimizing Performance
/ https://www.coursera.org/learn/data-structures-optimizing-performance
/
/ Authored by UCSD MOOC Team:
/ Mia Minnes, Christine Alvarado, Leo Porter, Alec Brickman
/ and Adam Setters
/
/ Date: 10/29/2015
/ Modified by: Dong Pei
/ Modified on: May. 2017
/


-------------------------------------------------------[ Whatâ€™s done by Dong ]--

1. Implement algorithm to calculate Flesch Readability Score. This score represents
how complex a paragraph is. (document/Document.java)

2. SUMMARIZE TEXT
Calculated the number of words, sentences, syllables in one paragraph by generated 
several methods using regular expression. (document/BasicDocument.java). Improved
the text processing efficiency by generate files to store data during the
read-in stage (document/EfficientDocument.java), report time consumes compared 
with old methods.

3. GENERATE RANDOM TEXT
Implemented Linked List data structure (textgen/MyLinkedList.java) and generated 
JUnit test cases (textgen/MyLinkedListTester.java). Implemented Markov method using 
Linked List to generate random text (textgen/MarkovTextGeneratorLoL.java).

4. AUTO-COMPLETE
Implemented Dictionary class to store dictionary of words using balanced BST and 
Linked List. (spelling/DictionaryLL.java, spelling/DictionaryBST.java and 
spelling/DictionaryBSTTester.java). Implemented auto-complete functionality 
by generating tire data structure (spelling/AutoCompleteDictionaryTrie.java and 
NearbyWords.java).

5. SPELLING SUGGESTION
Implemented spelling suggestion functionality by using edit distance. 
(spelling/NearbyWords.java, spelling/NearbyWords.java and spelling/WPTree.java)

6. Integrated functionality into front end.





-------------------------------------------------------------------------

---------------------------------------------------------[ DESCRIPTION ]--

The starter files provided are skeleton code, as well as grading previews and 
testing files to be used in completing the course programming 
assignments. 
The author who modified this code finished each task and provided solution in
the code

-------------------------------------------------------[ FILES BY WEEK ]--

Below are the files introduced in each week and used in each week
of the course. See file for description...

Week 1 : Introduction and Working with Strings
==============================================
document.Document.java
document.BasicDocument.java

Week 2 : Efficiency Analysis and Benchmarking
=============================================
document.EfficientDocument.java

Week 3 : Interfaces, Linked Lists vs. Arrays, and Correctness
=============================================================
textgen.MyLinkedList*.java
textgen.MarkovTextGenerator.java
textgen.MarkovTextGenerator*.java

Week 4 : Trees! (including Binary Search Trees and Tries)
=========================================================
spelling.SpellingSuggest.java
spelling.AutoComplete.java
spelling.Dictionary.java
spelling.Dictionary*.java
spelling.AutoCompleteDictionaryTrie.java
spelling.TrieNode.java

Week 5 : Hash Maps and Edit Distance
====================================
spelling.WordPath.java
spelling.NearbyWords.java
spelling.WPTree.java

---------------------------------------------------------------[ SETUP ]-- 

Importing Project into eclipse:
	1. Create a new Java Project in your workspace
	2. Import the starter files:
	  File -> Import -> Select "File System" -> Next -> Browse and set 
	  root directory to folder contents of zip were extracted to -> Finish

Feel free to use another IDE or manually compile and run your programs.
If you need help, google is your friend.

-----------------------------------------------------[ ACKNOWLEDGEMENTS]--

A big thank you to Tomas Mikula for creating RichTextFX 
which was used as the text area in the GUI application.
(Link: https://github.com/TomasMikula/RichTextFX)


